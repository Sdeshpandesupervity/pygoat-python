pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: StorageVariables # Contains secret variables like SONARQUBE_TOKEN, azureStorageConnectionString, NVD_API_KEY, etc.

stages:
  # SonarQube Analysis Stage
  

  # Trivy Repository Scan Stage
  - stage: TrivyRepoScan
    displayName: 'Trivy Repository Scan'

    jobs:
      - job: RepoScan
        displayName: 'Scan Repository with Trivy'
        steps:
          - script: |
              sudo apt-get install -y wget
              wget https://github.com/aquasecurity/trivy/releases/download/v0.33.0/trivy_0.33.0_Linux-64bit.deb
              sudo dpkg -i trivy_0.33.0_Linux-64bit.deb
          - script: |
              trivy fs --exit-code 0 --severity CRITICAL,HIGH,LOW --format json --output $(Build.ArtifactStagingDirectory)/trivy-repo-sbom.json .
          - script: |
              curl -X POST -H "Authorization: Token $(defectDojoToken)" \
                   -F 'scan_type=Trivy Scan' \
                   -F 'file=@$(Build.ArtifactStagingDirectory)/trivy-repo-sbom.json' \
                   -F 'engagement=1' \
                   -F 'active=true' \
                   -F 'verified=true' \
                   "$(defectDojoUrl)"

  # OWASP Dependency Check Stage
  - stage: OWASPDependencyCheck
    displayName: 'OWASP Dependency Check'
    dependsOn: TrivyRepoScan
    jobs:
      - job: DependencyCheck
        displayName: 'Run OWASP Dependency Check'
        steps:
          - script: |
              wget https://github.com/jeremylong/DependencyCheck/releases/download/v10.0.4/dependency-check-10.0.4-release.zip
              unzip dependency-check-10.0.4-release.zip -d dependency-check
              chmod +x dependency-check/bin/dependency-check.sh
              export PATH=$(pwd)/dependency-check/bin:$PATH
              echo "nvd.api.key=$(NVD_API_KEY)" > dependency-check.properties
          - script: |
              dependency-check/bin/dependency-check.sh \
              --project "pygoat-python" \
              --out "$(Build.SourcesDirectory)/dependency-check-report" \
              --scan "$(Build.SourcesDirectory)" \
              --format JSON
          - script: |
              curl -X POST -H "Authorization: Token $(defectDojoToken)" \
                   -F 'scan_type=Dependency Check Scan' \
                   -F 'file=@$(Build.SourcesDirectory)/dependency-check-report/dependency-check-report.json' \
                   -F 'engagement=1' \
                   -F 'active=true' \
                   -F 'verified=true' \
                   "$(defectDojoUrl)"

  # Build Stage
  - stage: Build
    displayName: 'Image Build'
    jobs:
      - job: Build
        displayName: 'Build and Push the Image to ACR'
        steps:
          - task: Docker@2
            inputs:
              containerRegistry: 'sumedhdocker'
              repository: 'sumedh03/test'
              command: 'buildAndPush'
              Dockerfile: '**/Dockerfile'

  # Trivy Image Scan Stage
  - stage: TrivyImageScan
    displayName: 'Trivy Image Scan'
    dependsOn: Build
    jobs:
      - job: ImageScan
        displayName: 'Scan Container Image with Trivy'
        steps:
          - task: Docker@2
            inputs:
              containerRegistry: '$(containerRegistry)'
              command: 'login'
          - script: |
              sudo apt-get update
              sudo apt-get install -y wget
              wget https://github.com/aquasecurity/trivy/releases/download/v0.33.0/trivy_0.33.0_Linux-64bit.deb
              sudo dpkg -i trivy_0.33.0_Linux-64bit.deb
          - script: |
              trivy image --exit-code 0 --severity CRITICAL,HIGH,LOW --format json --output $(Build.ArtifactStagingDirectory)/image-sbom.json $(containerRegistry)/$(imageName):$(Build.BuildId)
          - script: |
              curl -X POST -H "Authorization: Token $(defectDojoToken)" \
                   -F 'scan_type=Trivy Image Scan' \
                   -F 'file=@$(Build.ArtifactStagingDirectory)/image-sbom.json' \
                   -F 'engagement=1' \
                   -F 'active=true' \
                   -F 'verified=true' \
                   "$(defectDojoUrl)"
